{"version":3,"sources":["components/Header/index.js","components/Instructotron/index.js","components/Wrapper/index.js","components/ReactCard/index.js","components/Footer/index.js","App.js","index.js"],"names":["Header","props","react_default","a","createElement","className","src","href","title","message","score","topScore","Instructotron","Wrapper","children","ReactCard","id","style","backgroundImage","concat","image","onClick","handleClick","Footer","App","state","cards","handleCardClick","choseCorrectly","updatedDeck","_this","map","card","clicked","handleCorrectChoice","handleIncorrectChoice","updatedCards","newScore","newTopScore","Math","max","setState","resetGame","shuffleDeck","deck","sort","random","resetDeck","Object","objectSpread","this","_this2","components_Header","components_Instructotron","components_Wrapper","components_ReactCard","components_Footer","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0cd2d9e5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <nav className=\"header\">\n      <ul>\n        <li><span><img className=\"reactLogo\" src=\"./ReactLogoTranspBG.png\"/></span><a href=\"/\">{props.title}</a></li>\n        <li>{props.message}</li>\n        <li>Score: {props.score} | Top Score: {props.topScore}</li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Instructotron() {\n    return (\n        <div className=\"instructotron\">\n            <p className=\"game-title\">React Concentration Game!</p>\n            <p className=\"game-instructions\">Click on an image of a React.js Component to earn points.<br />But don't click on any more than once!</p>\n        </div>\n    );\n}\n\nexport default Instructotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ReactCard(props) {\n  return (\n    <div\n        className=\"card\"\n        id={props.id}\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        onClick={() => props.handleClick(props.id)}\n    />\n  );\n}\n\nexport default ReactCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Footer = () => (\n    <footer className=\"footer\">\n        <div className=\"bottom\">\n            Built with React.js to help visually demonstrate the mental process of keeping track of React components.\n        </div>\n    </footer>\n)\n\nexport default Footer;","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Instructotron from \"./components/Instructotron\";\nimport Wrapper from \"./components/Wrapper\";\nimport ReactCard from \"./components/ReactCard\";\nimport Footer from \"./components/Footer\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  // Setting the states for the game this.state.cards to the 'cards' json array\n  // When defining object properties with ES6, if the object's key and value have the same name, we can omit the colon\n  state = {\n    cards, // Set this.state.cards to the 'cards' json array\n    score: 0, // Set this.state.score to 0 as a default to start the game\n    topScore: 0, // Set this.state.topScore to 0 as a default to start the game\n    message: \"Click an image to begin!\" // Set this.state.message to an opening message\n  };\n\n  // Life-cycle method that's the React.js equivalent of $(document).ready() - do work once the components mount\n  componentDidMount() {\n    // Set this.state.cards to rearrange the cards on the page - \"Shuffle the Deck\" of ReactCards\n    this.setState({ cards: this.shuffleDeck(this.state.cards) });\n  }\n\n  // Function to handle the click of a card\n  handleCardClick = id => {\n    // Instantiate a variable to hold a default value of 'chosen' equal to false\n    let choseCorrectly = false;\n    // When a card is clicked, check to see if it has been clicked before - check this.state.cards[i].clicked ? true : false\n    // Iterate through the current cards (this.state.cards) using the .map() method\n    // Assign a variable to hold the results, because .map() creates a new array with the results and does not change the original array\n    const updatedDeck = this.state.cards.map(card => {\n      // Use a conditional to compare the id of the card clicked to the id's of all of the cards in this.state.cards\n      if (card.id === id) {\n        // If the value of 'clicked' is 'false' on the object matching the id of the card clicked...\n        if (!card.clicked) {\n          // ...set it to 'true'\n          card.clicked = true;\n          // Reassign the tracking variable choseCorrectly to 'true', meaning the player correctly chose an unclicked card\n          choseCorrectly = true;\n        }\n        // If this condition is not met, the default choseCorrectly value of 'false' is conserved, so the player did not choose correctly\n      }\n      // Return the card parameter for each of this.state.cards to the updatedDeck array\n      return card;\n    });\n    // Use choseCorrectly to handle this.state.score and this.state.topScore - i.e. invoke the corresponding built-in functions depending on whether player chose correctly\n    // condition ?           true                               false         \n    choseCorrectly ? this.handleCorrectChoice(updatedDeck) : this.handleIncorrectChoice(updatedDeck);\n  };\n\n  // Function to handle this.state.score and this.state.topScore when a player chooses a previously unclicked card\n  handleCorrectChoice = updatedCards => {\n    // Instantiate a variable to point to this.state.score so it can be incremented\n    let newScore = this.state.score;\n    newScore++\n    // Instantiate a variable to compare the new score to this.state.topScore to update the top score\n    // Use Math.max to compare without overwriting the value of this.state.topScore, since that needs to be conserved when a player wins/loses\n    // https://www.w3schools.com/jsref/jsref_max.asp\n    let newTopScore = Math.max(newScore, this.state.topScore);\n    // Check to see if the newTopScore is equal to the maximum score possible (12) - win condition\n    if (newTopScore === 12) {\n      this.setState({\n        // Set this.state.score to 0 to 'restart' the game without losing track of the topScore\n        score: 0,\n        // Set this.state.topScore to the maximum possible score\n        topScore: newTopScore,\n        // Set this.state.message to a 'win' message\n        message: \"You Win! Congratulations!\",\n        // Set this.state.cards to the return array of this.resetGame() to change all values of 'clicked' to false\n        cards: this.resetGame(updatedCards)\n      })\n    }\n    // Otherwise, continue with the game\n    else {\n      // Update the states and shuffle the deck of cards\n      this.setState({\n        // Set this.state.cards to the shuffled cards with the updated value of 'clicked'\n        cards: this.shuffleDeck(updatedCards),\n        // Set this.state.score to the new score\n        score: newScore,\n        // Set this.state.topScore to the new top score\n        topScore: newTopScore,\n        // Set this.state.message to \"You Guessed Correctly!\"\n        message: \"You Guessed Correctly!\"\n      })\n    }\n    // State change will re-render the components\n  }\n\n  // Function to handle this.state.score when a player incorrectly chooses a previously clicked card\n  handleIncorrectChoice = updatedCards => {\n    // Since player chose incorrectly, the game will need to be reset - i.e. all values of 'clicked' in this.state.cards need to be set to false\n    this.setState({\n      // Set this.state.cards to the return array of this.resetGame() to change all values of 'clicked' to false\n      cards: this.resetGame(updatedCards),\n      // Set this.state.score to 0 to 'restart' the game without losing track of the topScore\n      score: 0,\n      // Set this.state.message to \"You Guessed Incorrectly!\"\n      message: \"You Guessed Incorrectly!\"\n    })\n  }\n\n  // Function to handle \"Shuffling the Deck\" to rearrange the cards on the DOM\n  shuffleDeck = deck => {\n    // Assign a variable to receive the \"shuffled\" deck of cards\n    // array.sort(compareFunction) https://www.w3schools.com/jsref/jsref_sort.asp\n    // https://stackoverflow.com/a/43235780/10503606\n    let newDeck = deck.sort(() => Math.random() - 0.5); // * Note to self: test const versus let on newDeck\n    return newDeck; // There's no need to set this.state.cards to the newDeck because we can call this function in every other function that does setState, thereby re-rendering the components\n  };\n\n  // Function to handle resetting the game after a player makes an incorrect choice or wins the game\n  resetGame = deck => {\n    // Iterate through all of the card objects passed by the handle choice functions using the .map() method - set all values of 'clicked' to false\n    // Assign a variable to hold the results, because .map() creates a new array with the results and does not change the original array\n    // Use JSX Spread attribute to only update the key of 'clicked' to false https://zhenyong.github.io/react/docs/jsx-spread.html\n    const resetDeck = deck.map(card => ({ ...card, clicked: false }));\n    // Shuffle the reset deck and return it to the handle choice functions function which changes state to start the game over\n    return this.shuffleDeck(resetDeck);\n  };\n\n  // Render the components\n  render() {\n    return (\n      <div>\n        <Header\n          title=\"Concentration Game\" // Send the title to the props of Header\n          message={this.state.message} // Send this.state.message to the props of Header to display Correct! or Incorrect! messages\n          score={this.state.score} // Send this.state.score to the props of Header for display\n          topScore={this.state.topScore} // Send this.state.topScore to the props of Header for display\n        />\n        <Instructotron /> {/* Renders a Jumbotron-style banner with instructions on how to play the game */}\n        <Wrapper>\n          {\n            this.state.cards.map(card => ( // map() this.state.cards to pass each object in the array to the ReactCard component\n              <ReactCard\n                id={card.id} // Pass the id to reference later when a card is 'clicked'\n                image={card.image} // Pass the image file path to fill the background of the div in the ReactCard component\n                handleClick={this.handleCardClick} // Pass the onClick function of this.handleCardClick to handle each card being clicked\n              />\n            ))\n          }\n        </Wrapper >\n        <Footer /> {/* Renders a footer with the info about the build of the game */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}